{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { TEXT, DAYSTEXT, CITY, APIKEY, AUTHENTICATE } from './constants';\nlet initText = {\n  searchText: ''\n};\nexport const getText = (state = initText, action = {}) => {\n  switch (action.type) {\n    case TEXT:\n      // console.log('reducer:', action.type);\n      return { ...state,\n        searchText: action.payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\nlet initFMatch = {\n  res: {}\n};\nexport const setText = (state = initFMatch, action = {}) => {\n  switch (action.type) {\n    case DAYSTEXT:\n      return { ...state,\n        res: action.payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\nlet initCity = {\n  city: []\n};\nexport const setCity = (state = initCity, action = {}) => {\n  switch (action.type) {\n    case CITY:\n      return { ...state,\n        city: action.payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\nlet initAuthenticated = {\n  isAuthenticated: false,\n  user: []\n};\nexport const authenticateUser = (state = initAuthenticated, action = {}) => {\n  switch (action.type) {\n    case AUTHENTICATE:\n      return { ...state,\n        user: action.payload,\n        isAuthenticated: true\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\nconst rootReducer = combineReducers({\n  getText,\n  setText,\n  setCity\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/Sharon/Desktop/final_app/weatherApp/frontend/landing-page/src/redux/reducer.js"],"names":["combineReducers","TEXT","DAYSTEXT","CITY","APIKEY","AUTHENTICATE","initText","searchText","getText","state","action","type","payload","initFMatch","res","setText","initCity","city","setCity","initAuthenticated","isAuthenticated","user","authenticateUser","rootReducer"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,OAA9B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,YAAvC,QAA2D,aAA3D;AAGA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,UAAU,EAAE;AADD,CAAf;AAIA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACH,QAAP,EAAiBI,MAAM,GAAC,EAAxB,KAA8B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,IAAL;AACI;AACJ,aAAO,EAAC,GAAGQ,KAAJ;AAAWF,QAAAA,UAAU,EAACG,MAAM,CAACE;AAA7B,OAAP;;AACJ;AACI,aAAO,EAAC,GAAGH;AAAJ,OAAP;AALJ;AAOH,CARM;AAUP,IAAII,UAAU,GAAG;AACbC,EAAAA,GAAG,EAAE;AADQ,CAAjB;AAIA,OAAO,MAAMC,OAAO,GAAG,CAACN,KAAK,GAACI,UAAP,EAAmBH,MAAM,GAAC,EAA1B,KAAiC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,QAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAWK,QAAAA,GAAG,EAACJ,MAAM,CAACE;AAAtB,OAAP;;AACJ;AACI,aAAO,EAAC,GAAGH;AAAJ,OAAP;AAJR;AAMH,CAPM;AASP,IAAIO,QAAQ,GAAG;AACXC,EAAAA,IAAI,EAAE;AADK,CAAf;AAIA,OAAO,MAAMC,OAAO,GAAG,CAACT,KAAK,GAACO,QAAP,EAAiBN,MAAM,GAAC,EAAxB,KAA+B;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,IAAL;AACI,aAAO,EAAC,GAAGM,KAAJ;AAAWQ,QAAAA,IAAI,EAACP,MAAM,CAACE;AAAvB,OAAP;;AACJ;AACI,aAAO,EAAC,GAAGH;AAAJ,OAAP;AAJR;AAMH,CAPM;AASP,IAAIU,iBAAiB,GAAG;AACpBC,EAAAA,eAAe,EAAE,KADG;AAEpBC,EAAAA,IAAI,EAAE;AAFc,CAAxB;AAKA,OAAO,MAAMC,gBAAgB,GAAG,CAACb,KAAK,GAACU,iBAAP,EAA0BT,MAAM,GAAC,EAAjC,KAAwC;AACpE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,YAAL;AACI,aAAO,EAAC,GAAGI,KAAJ;AAAWY,QAAAA,IAAI,EAACX,MAAM,CAACE,OAAvB;AAAgCQ,QAAAA,eAAe,EAAC;AAAhD,OAAP;;AACJ;AACI,aAAO,EAAC,GAAGX;AAAJ,OAAP;AAJR;AAMH,CAPM;AAaP,MAAMc,WAAW,GAAGvB,eAAe,CAAC;AAChCQ,EAAAA,OADgC;AAEhCO,EAAAA,OAFgC;AAGhCG,EAAAA;AAHgC,CAAD,CAAnC;AAMA,eAAeK,WAAf","sourcesContent":["import {combineReducers} from 'redux';\r\nimport { TEXT, DAYSTEXT, CITY, APIKEY, AUTHENTICATE } from './constants'\r\n\r\n\r\nlet initText = {\r\n    searchText: '', \r\n}\r\n\r\nexport const getText = (state=initText, action={}) =>{\r\n    switch (action.type) {\r\n        case TEXT:\r\n            // console.log('reducer:', action.type);\r\n        return {...state, searchText:action.payload}\r\n    default:\r\n        return {...state}\r\n    }\r\n}\r\n\r\nlet initFMatch = {\r\n    res: {}\r\n}\r\n\r\nexport const setText = (state=initFMatch, action={}) => {\r\n    switch (action.type) {\r\n        case DAYSTEXT:\r\n            return {...state, res:action.payload}\r\n        default: \r\n            return {...state}\r\n    }\r\n}\r\n\r\nlet initCity = {\r\n    city: []\r\n}\r\n\r\nexport const setCity = (state=initCity, action={}) => {\r\n    switch (action.type) {\r\n        case CITY:\r\n            return {...state, city:action.payload}\r\n        default: \r\n            return {...state}\r\n    }\r\n}\r\n\r\nlet initAuthenticated = {\r\n    isAuthenticated: false,\r\n    user: []\r\n}\r\n\r\nexport const authenticateUser = (state=initAuthenticated, action={}) => {\r\n    switch (action.type) {\r\n        case AUTHENTICATE:\r\n            return {...state, user:action.payload, isAuthenticated:true}\r\n        default: \r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    getText,\r\n    setText,\r\n    setCity\r\n\r\n})\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}